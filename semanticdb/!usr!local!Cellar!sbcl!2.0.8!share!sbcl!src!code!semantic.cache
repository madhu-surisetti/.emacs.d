;; Object semanticdb-project-database-file-1ff33fb9f048
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1ff33fb9f048"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1ff338d791d4"
      :major-mode lisp-mode
      :tags 
        '( ("in-package" code nil nil [445 467])
            ("sb-xc:defmacro" code nil nil [494 918])
            ("save-inline-expansion-p" function (:arguments ("name")) nil [1002 1731])
            ("extract-dx-args" function (:arguments ("lambda-list" "decl-forms")) nil [1733 3581])
            ("block-compilation-non-entry-point" function (:arguments ("name")) nil [3583 3916])
            ("sb-xc:defmacro" code nil nil [8198 8767])
            ("declaim" code nil nil [8770 8874])
            ("%compiler-defglobal" function (:arguments ("name" "always-boundp" "assign-it-p" "value")) nil [13612 14012])
            ("%compiler-defvar" function (:arguments ("var")) nil [14014 14079])
            ("flet" code nil nil [14119 15966])
            ("sb-xc:defmacro" code nil nil [15969 16044])
            ("flet" code nil nil [16081 16535])
            ("sb-xc:defmacro" code nil nil [16537 16698])
            ("sb-xc:defmacro" code nil nil [16700 16789])
            ("sb-xc:defmacro" code nil nil [16833 17702])
            ("sb-xc:defmacro" code nil nil [17704 18195])
            ("flet" code nil nil [18320 19609])
            ("sb-xc:defmacro" code nil nil [19611 19704])
            ("sb-xc:defmacro" code nil nil [21706 24655])
            ("assert-prompt" function (:arguments ("name" "value")) nil [24657 24947])
            ("sb-xc:defmacro" code nil nil [25394 26943])
            ("sb-xc:defmacro" code nil nil [26972 27159])
            ("sb-c::%define-symbol-macro" function (:arguments ("name" "expansion" "source-location")) nil [27161 28204])
            ("sb-xc:defmacro" code nil nil [28235 29155])
            ("pick-best-sxhash-bits" function (:arguments ("keys" "hash-fun" "maxbytes" "maxbits")) nil [35422 39666])
            ("sb-xc:defmacro" code nil nil [41714 43201])
            ("expand-struct-typecase" function (:arguments ("keyform" "temp" "normal-clauses" "type-specs" "default" "errorp" "n-root-types" "exhaustive-list")) nil [44213 47384])
            ("case-body" function (:arguments ("name" "keyform" "cases" "multi-p" "test" "errorp" "proceedp" "needcasesp")) nil [65988 70876])
            ("sb-xc:defmacro" code nil nil [75358 75642])
            ("sb-xc:defmacro" code nil nil [75644 75933])
            ("sb-xc:defmacro" code nil nil [75935 76213])
            ("sb-xc:defmacro" code nil nil [76215 76449])
            ("sb-xc:defmacro" code nil nil [76451 76745])
            ("sb-xc:defmacro" code nil nil [76747 77032])
            ("sb-xc:defmacro" code nil nil [77272 77743])
            ("sb-xc:defmacro" code nil nil [77780 78016])
            ("sb-xc:defmacro" code nil nil [78018 78518])
            ("flet" code nil nil [78545 82236])
            ("sb-xc:defmacro" code nil nil [82238 82685])
            ("sb-xc:defmacro" code nil nil [82687 85324])
            ("sb-xc:defmacro" code nil nil [85356 85453])
            ("sb-xc:defmacro" code nil nil [85455 85568])
            ("sb-xc:defmacro" code nil nil [85570 85874])
            ("sb-xc:defmacro" code nil nil [85876 86668])
            ("funarg-bind/call-forms" function (:arguments ("funarg" "arg-forms")) nil [86730 87208])
            ("sb-xc:defmacro" code nil nil [87462 88459]))          
      :file "macros.lisp"
      :pointmax 90136
      :fsize 90135
      :lastmodtime '(24396 56922 0 0)
      :unmatched-syntax '((semantic-list 88461 . 90135) (semantic-list 71340 . 75356) (semantic-list 48324 . 64875) (semantic-list 40174 . 41366) (semantic-list 29628 . 30307) (symbol 29574 . 29580) (punctuation 29573 . 29574) (semantic-list 29157 . 29488) (semantic-list 19706 . 21183) (semantic-list 12905 . 13610) (semantic-list 11928 . 12903) (semantic-list 8904 . 11926) (semantic-list 3918 . 8152)))
    (semanticdb-table "semanticdb-table-1ff338d99708"
      :major-mode lisp-mode
      :tags 
        '( ("in-package" code nil nil [465 489])
            ("declaim" code nil nil [728 764])
            ("declaim" code nil nil [1630 1660])
            ("build-ratio" function (:arguments ("num" "den")) nil [1661 1997])
            ("declaim" code nil nil [2052 2085])
            ("maybe-truncate" function (:arguments ("x" "y")) nil [2086 2160])
            ("conjugate" function (:arguments ("number")) nil [4172 4434])
            ("signum" function (:arguments ("number")) nil [4436 4883])
            ("numerator" function (:arguments ("number")) nil [4899 5006])
            ("denominator" function (:arguments ("number")) nil [5008 5121])
            ("macrolet" code nil nil [5567 6132])
            ("-" function (:arguments ("number" "more-numbers")) nil [6134 6474])
            ("/" function (:arguments ("number" "more-numbers")) nil [6476 6811])
            ("1+" function (:arguments ("number")) nil [6813 6898])
            ("1-" function (:arguments ("number")) nil [6900 6985])
            ("two-arg-+/-" code nil nil [8694 8731])
            ("two-arg-+/-" code nil nil [8732 8773])
            ("%multiply-high" function (:arguments ("x" "y")) nil [13233 13312])
            ("floor" function (:arguments ("number" "divisor")) nil [13314 13541])
            ("ceiling" function (:arguments ("number" "divisor")) nil [13543 13764])
            ("rem" function (:arguments ("number" "divisor")) nil [13766 13884])
            ("mod" function (:arguments ("number" "divisor")) nil [13886 14001])
            ("round" function (:arguments ("number" "divisor")) nil [14003 15013])
            ("!define-float-rounding-function" function (:arguments ("name" "op" "doc")) nil [15015 15243])
            ("declaim" code nil nil [15506 15550])
            ("ffloor" function (:arguments ("number" "divisor")) nil [17075 17465])
            ("fceiling" function (:arguments ("number" "divisor")) nil [17467 17862])
            ("fround" function (:arguments ("number" "divisor")) nil [17963 18211])
            ("=" function (:arguments ("number" "more-numbers")) nil [18232 18542])
            ("/=" function (:arguments ("number" "more-numbers")) nil [18557 18973])
            ("macrolet" code nil nil [18975 19811])
            ("max" function (:arguments ("number" "more-numbers")) nil [19813 20095])
            ("min" function (:arguments ("number" "more-numbers")) nil [20097 20373])
            ("make-fixnum-float-comparer" function (:arguments ("operation" "integer" "float" "float-type")) nil [20375 21672])
            ("macrolet" code nil nil [25210 26709])
            ("macrolet" code nil nil [27664 28521])
            ("lognot" function (:arguments ("number")) nil [28523 28733])
            ("macrolet" code nil nil [28735 30426])
            ("logtest" function (:arguments ("integer1" "integer2")) nil [31126 31269])
            ("logbitp" function (:arguments ("index" "integer")) nil [31271 31701])
            ("ash" function (:arguments ("integer" "count")) nil [31703 32743])
            ("integer-length" function (:arguments ("integer")) nil [32745 33031])
            ("byte" function (:arguments ("size" "position")) nil [33080 33215])
            ("byte-size" function (:arguments ("bytespec")) nil [33217 33325])
            ("byte-position" function (:arguments ("bytespec")) nil [33327 33447])
            ("ldb" function (:arguments ("bytespec" "integer")) nil [33449 33575])
            ("ldb-test" function (:arguments ("bytespec" "integer")) nil [33577 33704])
            ("mask-field" function (:arguments ("bytespec" "integer")) nil [33706 33854])
            ("dpb" function (:arguments ("newbyte" "bytespec" "integer")) nil [33856 34014])
            ("deposit-field" function (:arguments ("newbyte" "bytespec" "integer")) nil [34016 34198])
            ("%ldb" function (:arguments ("size" "posn" "integer")) nil [34200 34705])
            ("%mask-field" function (:arguments ("size" "posn" "integer")) nil [34707 34850])
            ("%dpb" function (:arguments ("newbyte" "size" "posn" "integer")) nil [34852 35083])
            ("%deposit-field" function (:arguments ("newbyte" "size" "posn" "integer")) nil [35085 35320])
            ("boole" function (:arguments ("op" "integer1" "integer2")) nil [36511 37697])
            ("gcd" function (:arguments ("integers")) nil [37718 38492])
            ("lcm" function (:arguments ("integers")) nil [38494 39004])
            ("two-arg-lcm" function (:arguments ("n" "m")) nil [39006 39774])
            ("declaim" code nil nil [39776 39805])
            ("two-arg-gcd" function (:arguments ("u" "v")) nil [40888 41353])
            ("integer-/-integer" function (:arguments ("x" "y")) nil [41611 42318])
            ("declaim" code nil nil [42319 42351])
            ("two-arg-/" function (:arguments ("x" "y")) nil [42353 44511])
            ("macrolet" code nil nil [47759 48126])
            ("collect" code nil nil [48155 50333])
            ("or" code nil nil [50580 50608])
            ("sb-vm::ash-left-mod32" function (:arguments ("integer" "amount")) nil [50609 50885])
            ("or" code nil nil [50888 50916])
            ("sb-vm::ash-left-mod64" function (:arguments ("integer" "amount")) nil [50917 51226])
            ("or" code nil nil [51230 51255])
            ("sb-vm::ash-left-modfx" function (:arguments ("integer" "amount")) nil [51256 51587]))          
      :file "numbers.lisp"
      :pointmax 51588
      :fsize 51587
      :lastmodtime '(24396 56922 0 0)
      :unmatched-syntax '((symbol 51229 . 51230) (punctuation 51228 . 51229) (symbol 50887 . 50888) (punctuation 50886 . 50887) (symbol 50579 . 50580) (punctuation 50578 . 50579) (symbol 48153 . 48154) (punctuation 48152 . 48153) (semantic-list 44997 . 47718) (semantic-list 39806 . 40552) (semantic-list 35322 . 36496) (semantic-list 30428 . 31124) (semantic-list 26711 . 27646) (semantic-list 21674 . 25159) (semantic-list 15551 . 17073) (semantic-list 11017 . 13231) (semantic-list 10644 . 10987) (semantic-list 8775 . 10642) (semantic-list 6987 . 8692) (semantic-list 3737 . 4170) (semantic-list 3332 . 3735) (semantic-list 2179 . 3330) (semantic-list 765 . 1460))))
  :file "!usr!local!Cellar!sbcl!2.0.8!share!sbcl!src!code!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
